/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#ifndef _AUDIO_ANALOG_TYPE_H
#define _AUDIO_ANALOG_TYPE_H

/*****************************************************************************
 *                ENUM DEFINITION
 *****************************************************************************/

enum AUDIO_ANALOG_VOLUME_TYPE {
	AUDIO_ANALOG_VOLUME_HSOUTL = 0,
	AUDIO_ANALOG_VOLUME_HSOUTR,
	AUDIO_ANALOG_VOLUME_HPOUTL,
	AUDIO_ANALOG_VOLUME_HPOUTR,
	AUDIO_ANALOG_VOLUME_SPKL,
	AUDIO_ANALOG_VOLUME_SPKR,
	AUDIO_ANALOG_VOLUME_SPEAKER_HEADSET_R,
	AUDIO_ANALOG_VOLUME_SPEAKER_HEADSET_L,
	AUDIO_ANALOG_VOLUME_IV_BUFFER,
	AUDIO_ANALOG_VOLUME_LINEOUTL,
	AUDIO_ANALOG_VOLUME_LINEOUTR,
	AUDIO_ANALOG_VOLUME_LINEINL,
	AUDIO_ANALOG_VOLUME_LINEINR,
	AUDIO_ANALOG_VOLUME_MICAMPL,
	AUDIO_ANALOG_VOLUME_MICAMPR,
	AUDIO_ANALOG_VOLUME_LEVELSHIFTL,
	AUDIO_ANALOG_VOLUME_LEVELSHIFTR,
	AUDIO_ANALOG_VOLUME_TYPE_MAX
};

/* mux seleciotn */
enum AUDIO_ANALOG_MUX_TYPE {
	AUDIO_ANALOG_MUX_VOICE = 0,
	AUDIO_ANALOG_MUX_AUDIO,
	AUDIO_ANALOG_MUX_IV_BUFFER,
	AUDIO_ANALOG_MUX_LINEIN_STEREO,
	AUDIO_ANALOG_MUX_LINEIN_L,
	AUDIO_ANALOG_MUX_LINEIN_R,
	AUDIO_ANALOG_MUX_LINEIN_AUDIO_MONO,
	AUDIO_ANALOG_MUX_LINEIN_AUDIO_STEREO,
	AUDIO_ANALOG_MUX_IN_MIC1,
	AUDIO_ANALOG_MUX_IN_MIC2,
	AUDIO_ANALOG_MUX_IN_MIC3,
	AUDIO_ANALOG_MUX_IN_MIC4,
	AUDIO_ANALOG_MUX_IN_LINE_IN,
	AUDIO_ANALOG_MUX_IN_PREAMP_1,
	AUDIO_ANALOG_MUX_IN_PREAMP_2,
	AUDIO_ANALOG_MUX_IN_LEVEL_SHIFT_BUFFER,
	AUDIO_ANALOG_MUX_MUTE,
	AUDIO_ANALOG_MUX_OPEN,
	AUDIO_ANALOG_MAX_MUX_TYPE
};

/* device power */
enum AUDIO_ANALOG_DEVICE_TYPE {
	AUDIO_ANALOG_DEVICE_OUT_EARPIECER = 0,
	AUDIO_ANALOG_DEVICE_OUT_EARPIECEL = 1,
	AUDIO_ANALOG_DEVICE_OUT_HEADSETR = 2,
	AUDIO_ANALOG_DEVICE_OUT_HEADSETL = 3,
	AUDIO_ANALOG_DEVICE_OUT_SPEAKERR = 4,
	AUDIO_ANALOG_DEVICE_OUT_SPEAKERL = 5,
	AUDIO_ANALOG_DEVICE_OUT_SPEAKER_HEADSET_R = 6,
	AUDIO_ANALOG_DEVICE_OUT_SPEAKER_HEADSET_L = 7,
	AUDIO_ANALOG_DEVICE_OUT_LINEOUTR = 8,
	AUDIO_ANALOG_DEVICE_OUT_LINEOUTL = 9,
	AUDIO_ANALOG_DEVICE_2IN1_SPK = 10,
	/* DEVICE_IN_LINEINR = 11, */
	/* DEVICE_IN_LINEINL = 12, */
	AUDIO_ANALOG_DEVICE_IN_ADC1 = 13,
	AUDIO_ANALOG_DEVICE_IN_ADC2 = 14,
	AUDIO_ANALOG_DEVICE_IN_ADC3 = 15,
	AUDIO_ANALOG_DEVICE_IN_PREAMP_L = 16,
	AUDIO_ANALOG_DEVICE_IN_PREAMP_R = 17,
	AUDIO_ANALOG_DEVICE_IN_DIGITAL_MIC = 18,
	AUDIO_ANALOG_DEVICE_MAX
};

enum AUDIO_ANALOG_DEVICE_SAMPLERATE_TYPE {
	AUDIO_ANALOG_DEVICE_OUT_DAC,
	AUDIO_ANALOG_DEVICE_IN_ADC,
	AUDIO_ANALOG_DEVICE_INOUT_MAX
};

enum AUDIO_ANALOG_DEVICE_TYPE_SETTING {
	AUDIO_ANALOG_DEVICE_PLATFORM_MACHINE,
	AUDIO_ANALOG_DEVICE_PLATFORM,
	AUDIO_ANALOG_DEVICE_MACHINE,
	AUDIO_ANALOG_DEVICE_TYPE_SETTING_MAX
};

enum AUDIO_ANALOG_AUDIOANALOG_TYPE {
	AUDIO_ANALOG_AUDIOANALOG_DEVICE,
	AUDIO_ANALOG_AUDIOANALOG_VOLUME,
	AUDIO_ANALOG_AUDIOANALOG_MUX
};

enum AUDIO_ANALOG_AUDIOANALOGZCD_TYPE {
	AUDIO_ANALOG_AUDIOANALOGZCD_HEADPHONE = 1,
	AUDIO_ANALOG_AUDIOANALOGZCD_HANDSET = 2,
	AUDIO_ANALOG_AUDIOANALOGZCD_IVBUFFER = 3,
};

enum AUDIO_ANALOG_SPEAKER_CLASS {
	AUDIO_ANALOG_CLASS_AB = 0,
	AUDIO_ANALOG_CLASS_D,
};

enum AUDIO_ANALOG_CHANNELS {
	AUDIO_ANALOG_CHANNELS_LEFT1 = 0,
	AUDIO_ANALOG_CHANNELS_RIGHT1,
};

enum AUDIOANALOG_COMMAND {
	AUDIO_ANALOG_SET_SPEAKER_CLASS = 0,
	AUDIO_ANALOG_GET_SPEAKER_CLASS = 1,
	AUDIO_ANALOG_SET_CURRENT_SENSING = 2,
	AUDIO_ANALOG_SET_CURRENT_SENSING_PEAK_DETECTOR = 3,
};

enum AUDIO_ANALOG_LOOPBACK {
	CODEC_LOOPBACK_NONE = 0,
	CODEC_LOOPBACK_AMIC_TO_SPK,
	CODEC_LOOPBACK_AMIC_TO_HP,
	CODEC_LOOPBACK_DMIC_TO_SPK,
	CODEC_LOOPBACK_DMIC_TO_HP,
	CODEC_LOOPBACK_HEADSET_MIC_TO_SPK,
	CODEC_LOOPBACK_HEADSET_MIC_TO_HP,
};

enum audio_analog_dac_frequency {
	DAC_FREQ_8000 = 0,
	DAC_FREQ_11025,
	DAC_FREQ_12000,
	DAC_FREQ_16000,
	DAC_FREQ_22050,
	DAC_FREQ_24000,
	DAC_FREQ_32000,
	DAC_FREQ_44100,
	DAC_FREQ_48000,
};

enum audio_analog_adc_frequency {
	ADC_FREQ_8000 = 0,
	ADC_FREQ_16000,
	ADC_FREQ_32000,
	ADC_FREQ_48000,
};

enum audio_amp_class_type {
	AUDIO_AMP_CLASS_D = 0,
	AUDIO_AMP_CLASS_AB,
};

struct mt6397_Codec_Data_Priv {
	int mAudio_Ana_Volume[AUDIO_ANALOG_VOLUME_TYPE_MAX];
	int mAudio_Ana_Mux[AUDIO_ANALOG_MAX_MUX_TYPE];
	int mAudio_Ana_DevicePower[AUDIO_ANALOG_DEVICE_MAX];
	int mAudio_Ana_Spk_Channel_Sel;
	int spk_pga_adj;
	int mAudio_Amp_class_type;
	uint8_t mHPLtrim;
	uint8_t mHPLfinetrim;
	uint8_t mHPRtrim;
	uint8_t mHPRfinetrim;
	uint8_t mIVHPLtrim;
	uint8_t mIVHPLfinetrim;
	uint8_t mIVHPRtrim;
	uint8_t mIVHPRfinetrim;
	uint8_t mSPKlpolarity;
	uint8_t mISPKltrim;
	uint8_t mSPKrpolarity;
	uint8_t mISPKrtrim;
	uint32_t mCodecLoopbackType;
	uint32_t dac_sgen_switch;
	uint32_t adc_sgen_switch;
};

#endif
